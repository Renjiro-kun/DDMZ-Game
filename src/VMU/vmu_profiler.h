/* Threaded VMU Profiler 
   Copyright (C) 2024 Falco Girgis

   This code is copyrighted and royalties must be paid
   for its inclusion within your own projects.

   ...just fucking with you. Warez me! :D
*/

#ifndef VMU_H_
#define VMU_H_

#include <Defines.h>
#include <thread>
#include <mutex>
#include <shared_mutex>
#include <chrono>
#include <numeric>
#include <array>

#ifdef DC_SH4
#   include <kos.h>
#   include <dc/sound/sound.h>
#   include <malloc.h>
#   include <dc/vmu_fb.h>
#endif

constexpr float operator "" _MB(unsigned long long value) {
    return 1024.0f * 1024.0f * value;
}

static vmufb_t vmufb;
/* Linux 4x6 font: lib/fonts/font_mini_4x6.c
 *
 * Created by Kenneth Albanowski.
 * No rights reserved, released to the public domain.
 */
static const unsigned char fontdata_4x6[] = {
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0x00, 0x00, 0x00, 0x44, 0x40, 0x40, 0xaa, 0x00,
	0x00, 0xaf, 0xfa, 0x00, 0x46, 0xec, 0x40, 0xa2,
	0x48, 0xa0, 0x69, 0x6a, 0xd0, 0x24, 0x00, 0x00,
	0x24, 0x44, 0x20, 0x42, 0x22, 0x40, 0x0e, 0xee,
	0x00, 0x04, 0xe4, 0x00, 0x00, 0x04, 0x80, 0x00,
	0xe0, 0x00, 0x00, 0x00, 0x40, 0x02, 0x48, 0x00,
	0x4a, 0xaa, 0x40, 0x4c, 0x44, 0xe0, 0xc2, 0x48,
	0xe0, 0xe2, 0x62, 0xe0, 0xaa, 0xe2, 0x20, 0xe8,
	0xe2, 0xe0, 0xe8, 0xea, 0xe0, 0xe2, 0x22, 0x20,
	0xea, 0xea, 0xe0, 0xea, 0xe2, 0x20, 0x00, 0x40,
	0x40, 0x00, 0x40, 0x48, 0x24, 0x84, 0x20, 0x0e,
	0x0e, 0x00, 0x84, 0x24, 0x80, 0xe2, 0x60, 0x40,
	0x4e, 0xe8, 0x40, 0x4a, 0xea, 0xa0, 0xca, 0xca,
	0xc0, 0x68, 0x88, 0x60, 0xca, 0xaa, 0xc0, 0xe8,
	0xe8, 0xe0, 0xe8, 0xe8, 0x80, 0x68, 0xea, 0x60,
	0xaa, 0xea, 0xa0, 0xe4, 0x44, 0xe0, 0x22, 0x2a,
	0x40, 0xaa, 0xca, 0xa0, 0x88, 0x88, 0xe0, 0xae,
	0xea, 0xa0, 0xae, 0xee, 0xa0, 0x4a, 0xaa, 0x40,
	0xca, 0xc8, 0x80, 0x4a, 0xae, 0x60, 0xca, 0xec,
	0xa0, 0x68, 0x42, 0xc0, 0xe4, 0x44, 0x40, 0xaa,
	0xaa, 0x60, 0xaa, 0xa4, 0x40, 0xaa, 0xee, 0xa0,
	0xaa, 0x4a, 0xa0, 0xaa, 0x44, 0x40, 0xe2, 0x48,
	0xe0, 0x64, 0x44, 0x60, 0x08, 0x42, 0x00, 0x62,
	0x22, 0x60, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x0f,
	0x84, 0x00, 0x00, 0x00, 0x6a, 0xe0, 0x88, 0xca,
	0xc0, 0x00, 0x68, 0x60, 0x22, 0x6a, 0x60, 0x0e,
	0xe8, 0x60, 0x24, 0xe4, 0x40, 0x06, 0xa6, 0xe0,
	0x88, 0xca, 0xa0, 0x40, 0x44, 0x40, 0x40, 0x44,
	0x80, 0x08, 0xac, 0xa0, 0x0c, 0x44, 0xe0, 0x00,
	0xee, 0xa0, 0x00, 0xca, 0xa0, 0x04, 0xaa, 0x40,
	0x00, 0xca, 0xc8, 0x00, 0x6a, 0x62, 0x0c, 0xa8,
	0x80, 0x06, 0xc2, 0xc0, 0x04, 0xe4, 0x40, 0x00,
	0xaa, 0x60, 0x00, 0xae, 0x40, 0x00, 0xae, 0xe0,
	0x00, 0xa4, 0xa0, 0x00, 0xae, 0x2c, 0x0e, 0x6c,
	0xe0, 0x24, 0xc4, 0x20, 0x44, 0x44, 0x40, 0x84,
	0x64, 0x80, 0x5a, 0x00, 0x00, 0x4a, 0xae, 0x00,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0x06, 0xc6, 0x00, 0x0c, 0x6c, 0x00,
	0x82, 0x82, 0x82, 0xa5, 0xa5, 0xa5, 0xdb, 0xdb,
	0xdb, 0x44, 0x44, 0x44, 0x44, 0xc4, 0x44, 0x44,
	0xcc, 0x44, 0x66, 0xe6, 0x66, 0x00, 0xe6, 0x66,
	0x00, 0xcc, 0x44, 0x66, 0xee, 0x66, 0x66, 0x66,
	0x66, 0x00, 0xee, 0x66, 0x66, 0xee, 0x00, 0x66,
	0xe0, 0x00, 0x44, 0xcc, 0x00, 0x00, 0xc4, 0x44,
	0x44, 0x70, 0x00, 0x44, 0xf0, 0x00, 0x00, 0xf4,
	0x44, 0x44, 0x74, 0x44, 0x00, 0xf0, 0x00, 0x44,
	0xf4, 0x44, 0x44, 0x77, 0x44, 0x66, 0x76, 0x66,
	0x66, 0x77, 0x00, 0x00, 0x77, 0x66, 0x66, 0xff,
	0x00, 0x00, 0xff, 0x66, 0x66, 0x77, 0x66, 0x00,
	0xff, 0x00, 0x66, 0xff, 0x66, 0x44, 0xff, 0x00,
	0x66, 0xf0, 0x00, 0x00, 0xff, 0x44, 0x00, 0xf6,
	0x66, 0x66, 0x70, 0x00, 0x44, 0x77, 0x00, 0x00,
	0x77, 0x44, 0x00, 0x76, 0x66, 0x66, 0xf6, 0x66,
	0x44, 0xff, 0x44, 0x44, 0xc0, 0x00, 0x00, 0x74,
	0x44, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xcc,
	0xcc, 0xcc, 0x33, 0x33, 0x33, 0xff, 0xf0, 0x00,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0,
	0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee,
	0xe0, 0xee, 0xee, 0xe0, 0xee, 0xee, 0xe0, 0xee,
	0xee, 0xe0, 0x00, 0x66, 0x00, 0xee, 0xee, 0xe0,
};

static const vmufb_font_t vmufb_font4x6 = {
	.w = 4,
	.h = 6,
	.stride = 3,
	.fontdata = (char*)fontdata_4x6,
};

void vmu_printf(const char *fmt, ...)
{
	maple_device_t *dev;
	unsigned int vmu;
	char buf[256];
	va_list va;
	buf[sizeof(buf) - 1] = '\0';
	va_start(va, fmt);
	vsnprintf(buf, sizeof(buf), fmt, va);
	va_end(va);
	vmufb_print_string(&vmufb, &vmufb_font4x6, buf);
	for (vmu = 0; ; vmu++) {
		dev = maple_enum_type(vmu, MAPLE_FUNC_LCD);
		if (!dev)
			break;
		vmufb_present(&vmufb, dev);
	}
}

class VmuProfiler: public std::thread {
private:

    constexpr static auto         updateRate_  = std::chrono::milliseconds(100);
    constexpr static size_t       fpsSamples   = 10;
    static inline VmuProfiler     *instance_   = nullptr;
#ifdef DC_SH4
    vmufb_t                       frameBuffer_ = { 0 };
#endif
    mutable std::shared_mutex     mtx_         = {};
    bool                          fbDirty_     = false;
    std::atomic<bool>             done_        = false;
    std::array<float, fpsSamples> fps_         = { 0.0f };
    size_t                        fpsFrame_    = 0;
    size_t                        vertexCount_ = 0;

protected:

    virtual void run() {
        while(!done_) {
#ifdef DC_SH4
            if(auto *dev = maple_enum_type(0, MAPLE_FUNC_MEMCARD); dev) {

                pvr_stats_t pvrStats;   pvr_get_stats(&pvrStats);
                auto        mInfo     = mallinfo();
                uint32_t    sramStats = snd_mem_available();
                size_t      pvrAvail  = pvr_mem_available();
                float       fps       = std::accumulate(std::begin(fps_), std::end(fps_), 0.0f) 
                                        / static_cast<float>(fpsSamples);

                float sh4Mem = static_cast<float>(mInfo.uordblks) / 
                               static_cast<float>(mInfo.uordblks + mInfo.fordblks) * 100.0f;
                float pvrMem = (8_MB - pvrAvail ) / 8_MB * 100.0f;
                float armMem = (2_MB - sramStats) / 2_MB * 100.0f;
                {
                    std::shared_lock lk(mtx_);

                    vmu_printf("FPS : %.2f\n"
                               "SH4 : %.2f%%\n"
                               "PVR : %.2f%%\n"
                               "ARM : %.2f%%\n"
                               "VTX : %lu",
                               fps, sh4Mem, pvrMem, armMem, 
                               vertexCount_);
                }
            }
#endif
            std::this_thread::sleep_for(updateRate_);
        }
    }

public:

    static VmuProfiler *getInstance() {
        return instance_;
    }

    VmuProfiler():
        std::thread(&VmuProfiler::run, this)
    {
        instance_ = this;
    }

    ~VmuProfiler() {
        done_ = true;
        join();
    }

    // To be called every frame, so we can update FPS stats too!
    void setVertexCount(size_t count) {
        std::unique_lock lk(mtx_);
        vertexCount_ = count;

#ifdef DC_SH4
        pvr_stats_t pvrStats; 
        pvr_get_stats(&pvrStats);       
        fps_[fpsFrame_++] = pvrStats.frame_rate;

        if(fpsFrame_ >= fpsSamples)
            fpsFrame_ = 0;
#endif
    }
};

#endif
